编译器在翻译成 一个 可执行目标文件的过程 可分为四个阶段完成 
	1、 预处理阶段   将  程序文件中的   import  或者 #include  的预处理文件  中的内容 插入到程序文本中  得到另一个C程序  通常以 .i 作为文件扩展名
	2.   编译阶段  将文本文件 .i  翻译成文本文件 .s   具体 行为 是 ： 将每条语句  描述成一条低级的机器语言指令 ， 转换成  汇编语言 
		（不同的高级语言  的 不同编译器  都会提供 通用的 输出语言     产生的 输出文件 都是 一样的汇编语言组成）
	3。 汇编阶段  将  （由汇编语言组成）的文本文件 .S  翻译成机器语言指令  。打包成为一种  （可重定位目标程序 ） 将结果保存在目标文件.O 中  .O是一个二进制文件 
	4.   连接阶段  将  库函数中定义好的方法 来 合并到 。O程序中  连接器来处理这种合并 的、 合并完成 得到 可执行目标文件 可以被加载到内存中

	了解 编译系统  能够 更大程度上   1.优化程序性能   2.理解链接时出现的错误    3.避免安全漏洞

系统的 硬件组成：
	1。总线   ：  携带信息字节 并负责 在各个部件见 传递  
		一般来说  总线是 固定长度的 字节块   也称为字 
		字仲的字节数 字长 是基本的系统参数  根据系统的不同  都不一样
	2. I/O设备 ： 系统与外部世界的联系通道
		每个I/O 设备通过控制器 或者 适配器  和 I/O总线 相连

		控制器： I/O 设备本身或者系统的 主印制电路板 上的芯片组
		适配器： 一块插在主板插槽上的卡  
			功能： I/O 总线和I/O 设备之间的传递信息
	3.主存 ： 临时存储设备   在CPU 执行程序时 用来存放 程序和程序处理的数据，
		主存 是一组动态水机存储器(DRAM) 组成的 从逻辑上 是一个线性的字节数组
	
	4. CPU ：中央处理单元 ： 解释 存储在主存中的 指令引擎：处理器的核心是一个大小为一个字的寄存器 （程序计数器）
		处理器在任何时候都在执行 程序计数器的 指令 
			类似与在队中执行  队内的 程序指令
		4.1 寄存器： 一个小的存储设备 
		CPU ：执行指令的过程  
			1.加载  从主存 中 复制 字节到 寄存器  覆盖原来的内容
			2.存储  从寄存器复制一个字节 或者 一个字 到主存 覆盖 原有信息
			3. 操作 将两个 寄存器 的内容复制到 ALU  后做 算数运算  将结果 存储到 一个寄存器 
			4. 跳转 从指令本身 抽取 一个 字 复制到   程序计数器 （PC）覆盖原有的值
		P44页	一旦： 执行文件被 加载到 主存 就开始执行main 中的 机器语言指令  
	
	5.高速缓存： 减少 在 主存 和 内存中的 工作    
		（cache）  可以 利用高速缓存  提高程序性能
	
 	6. 存储设备 ：  在处理器和   较大较慢的 设备 中 （主存）  插入更小更快的设备  
		P46  具体的 存储设备i分类
	
	7. 操作系统 管理硬件 ：
		操作系统 在 应用程序和 硬件之中 插入的 一套软件   将应用程序和 具体的 硬件 形成联系
		功能：
			7.1 防止 硬件被 失控的 程序 滥用 
			7.2 想应用设备 提供 简单一致的 机制 来控制 复杂而 又通常不相同的 硬件设备
				（通过 进程  虚拟内存  文件） 来实现
		文件 ：对 I/O 设备的 抽象表示 
		虚拟内存 ： 对主存 和 磁盘 I/O 设备的抽象表示
		进程  ： 对 处理器  主存  I/O 设备的 抽象表示
	8. 进程：  操作系统 对 一个具体的 运行的 程序的一种抽象  ： 一个系统上 同时 运行多个 进程  
		每个进程 都仿佛 是 独立的 使用 硬件  ，而 并发进行  则 是说 一个进程的指令和 另一个进程 是 交错执行的
		CPU  看上去 是并发的 执行多个 进程  ！ 实则是在 进程中切换 来实现  称为（上下文切换）
		
		一个进程到 另一个进程 的转换 是 操作系统 内核 管理的   内核是 操作系统代码常驻主存的 部分 
		当应用程序需要操作系统 的 某些操作 时 执行 特殊的 系统调用 将 控制权传递给内核 
			内核：系统管理全部进程所用的 代码和 数据结构的集合

	9. 线程： 一个进程 由多个  线程的执行单元组成   每个线程 都运行在 进程 的上下文中 共享  同样的代码 和 全局数据
		多线程  比 多进程 更容易 共享数据  
		 线程一般比 进程 更加高效       多线程使得 程序运行的更快 
	10.虚拟内存  ： 为 进程 提供的假象   每个进程都独立使用主存   每个进程看见的内存都是一致的  称为 虚拟地址空间
			P49  介绍 一个 代码运行过程的 内存开辟	
				第一步：将代码和数据区的内容 初始化
				第二步：在  进程开始 时  指定堆内存大小    在调用 C标准函数时：堆会在运行时动态的扩展和收缩
				第三步：在共享库中存放共享的代码和数据区域
				第四步：开展用户栈  L 实现函数调用  在程序执行期间动态的扩展和搜索	在调用函数 入栈  函数返回  出栈
				第五步：地址空间顶部的区域为 内核保留  不允许程序读写
			虚拟内存：是将一个进程的虚拟内存 存储到磁盘上  主存作为磁盘的高速缓存
	11.文件：字节序列  		系统中的输入输出设备   通过一组    I/O 的系统函数 调用读写文件来实现
系统之间的网络通信：
	将网络 视为一个 I/O 设备     系统通过网络和其他系统连接到一起
	系统从主存 复制 字节到网络适配器   数据流通过网络传递到另一台机器

	例：  1.客户端 连接上服务器  在远程服务器运行程序
		2.服务器等待客户端的输入     输入后 在服务端将运行结果 发送给服务器

	1.2  主题：系统是硬件和系统软件的集合体 通过共同协同达到运行应用程序的目的
		Amdahl 定理（系统某一部分性能带来的效果计算）：	P52页
		       系统整体性能 影响取决于 部分重要性和 加速程度 
		执行时间为T    部分执行时间和 T的比例为 β  性能提升比例为K  部分初始时间为  βT   所需时间为（βT）/T
			总的执行时间为  T =（1-β)T + (βT)/K = T[(l-β)+β/K]
			加速比为： S =  1/  （（1-β）+β/K）
		
	1.3 并发和并行:
		并发： 同时具有多个活动的系统    并行：  用并发使一个 系统运行的更快 
		线程级 并发  ：建立在进程的抽象上    使用线程 在一个进程中 执行多个控制流
		